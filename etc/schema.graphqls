type Query {
    megamenu (
        alias: String! = "top-menu" @doc(description: "Query by menu alias. Default menu profile alias = top-menu")
        isMobile: Int = 0 @doc(description: "Query mobile menu profile if exists. Default value = 0")
    ) : Megamenu @resolver( class: "Lof\\MegamenuGraphQl\\Model\\Resolver\\Megamenu") @doc(description: "Query by Get megamenu by ID.") @cache( cacheIdentity: "Lof\\MegamenuGraphQl\\Model\\Resolver\\Megamenu\\Identity")
    megamenus (
        filters: MegamenuFilterInput @doc(description: "Identifies which brand filter inputs to search for and return.")
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
        sort: MegamenuSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
    ) : Megamenus @resolver( class: "Lof\\MegamenuGraphQl\\Model\\Resolver\\Megamenus") @doc(description: "Query by Specifies which attributes to sort on, and whether to return the results in ascending or descending order..") @cache( cacheIdentity: "Lof\\MegamenuGraphQl\\Model\\Resolver\\Megamenus\\Identity")
}

input MegamenuFilterInput  @doc(description: "MegamenuFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.")
{
    menu_id: FilterEqualTypeInput @deprecated(reason: "Filter Slider entity_id")
    alias: FilterEqualTypeInput @deprecated(reason: "Filter Slider alias")
    status: FilterEqualTypeInput @deprecated(reason: "Filter Slider is_enabled")
    store_id: FilterMatchTypeInput @deprecated(reason: "Filter Slider store_id")
    name: FilterMatchTypeInput @deprecated(reason: "Filter Slider title")
}

input MegamenuSortInput @doc(description: "MegamenuSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort sliders using searchable attributes with enabled 'Use in Filter Options' option")
{
    creation_time: SortEnum @doc(description: "Sort by the creation_time")
    update_time: SortEnum @doc(description: "Sort by the update_time assigned to each menu.")
    status: SortEnum @doc(description: "Sort by the status assigned to each menu.")
    name: SortEnum @doc(description: "Sort by the name assigned to each menu.")
    alias: SortEnum @doc(description: "Sort by the alias assigned to each menu.")
    menu_id: SortEnum @doc(description: "Sort by the menu_id (default).")
}

type Megamenu {
    menu_id  : String  @doc(description: "Query by menu_id.")
    name  : String  @doc(description: "Query by name.")
    alias  : String  @doc(description: "Query by alias.")
    disable_bellow  : Int  @doc(description: "Query by 	disable_bellow.")
    status  : Int  @doc(description: "Query by status.")
    design  : String  @doc(description: "Query by design.")
    event  : String  @doc(description: "Query by event.")
    classes  : String  @doc(description: "Query by classes.")
    width  : String  @doc(description: "Query by width.")
    html  : String  @doc(description: "Query by html.")
    params : String  @doc(description: "Query by params.")
    desktop_template: String  @doc(description: "Query by desktop_template.")
    mobile_template: String  @doc(description: "Query by mobile_template.")
    structure : String @doc(description: "Query by structure.")
    scrolltofixed  : Int  @doc(description: "Query by scrolltofixed.")
    mobile_menu_alias  : String  @doc(description: "Query by mobile_menu_alias.")
    disable_iblocks  : Int  @doc(description: "Query by 	disable_iblocks.")
    customer_groups: [Int] @doc(description: "Query by customer groups.")
    stores: [Int] @doc(description: "Query by stores.")
    nodes: [MegamenuItemNode] @doc(description: "Query by MegamenuItemNode.")
}

type MegamenuItemNode {
    id: Int
    item_id: String
    name: String
    show_name: Int
    classes: String
    child_col: String
    sub_width: String
    align: String
    icon_position: String
    icon_classes: String
    is_group: Int
    status: Int
    disable_bellow: Int
    show_icon: Int
    icon: String
    show_header: Int
    header_html: String
    show_left_sidebar: Int
    left_sidebar_width: String
    menu_id: Int
    left_sidebar_html: String
    show_content: Int
    content_width: String
    content_type: String
    link_type: String
    link: String
    category: String
    target: String
    content_html: String
    show_right_sidebar: Int
    right_sidebar_width: String
    right_sidebar_html: String
    show_footer: Int
    footer_html: String
    color: String
    hover_color: String
    bg_color: String
    bg_hover_color: String
    inline_css: String
    tab_position: String
    before_html: String
    after_html: String
    caret: String
    hover_caret: String
    sub_height: String
    hover_icon: String
    dropdown_bgcolor: String
    dropdown_bgimage: String
    dropdown_bgimagerepeat: String
    dropdown_bgpositionx: String
    dropdown_bgpositiony: String
    dropdown_inlinecss: String
    parentcat: String
    animation_in: String
    animation_time: String
    child_col_type: String
    submenu_sorttype: String
    isgroup_level: String
    child_nodes: [MegamenuItemNode] @doc(description: "Query by MegamenuItemNode.")
}

type Megamenus @doc(description: "The megamenus object is the top-level object returned in a slider search.") {
    items: [Megamenu] @doc(description: "An array of images that match the specified search criteria.")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    total_count: Int @doc(description: "The number of images that are marked as visible. By default, in complex images, parent images are visible, but their child menu are not.")
    sort_fields: SortFields @doc(description: "An object that includes the default sort field and all available sort fields.") @resolver(class: "Lof\\MegamenuGraphQl\\Model\\Resolver\\Megamenus\\SortFields")
}

type SortField {
    value: String @doc(description: "Attribute code of sort field.")
    label: String @doc(description: "Label of sort field.")
}
type SortFields @doc(description: "SortFields contains a default value for sort fields and all available sort fields.") {
    default: String @doc(description: "Default value of sort fields.")
    options: [SortField] @doc(description: "Available sort fields.")
}
